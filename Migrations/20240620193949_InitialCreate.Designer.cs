// <auto-generated />
using System;
using CadenceCollab.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Cadence_Collab.Migrations
{
    [DbContext(typeof(CadenceCollabDbContext))]
    [Migration("20240620193949_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ArtistSong", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SongId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("ArtistSongs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SongId = 1,
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 2,
                            SongId = 2,
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 3,
                            SongId = 3,
                            UserProfileId = 3
                        },
                        new
                        {
                            Id = 4,
                            SongId = 4,
                            UserProfileId = 4
                        },
                        new
                        {
                            Id = 5,
                            SongId = 5,
                            UserProfileId = 5
                        },
                        new
                        {
                            Id = 6,
                            SongId = 6,
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 7,
                            SongId = 7,
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 8,
                            SongId = 8,
                            UserProfileId = 3
                        },
                        new
                        {
                            Id = 9,
                            SongId = 9,
                            UserProfileId = 4
                        },
                        new
                        {
                            Id = 10,
                            SongId = 10,
                            UserProfileId = 5
                        });
                });

            modelBuilder.Entity("CadenceCollab.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("text");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("IdentityUserId");

                    b.HasIndex("TypeId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "101 Main Street",
                            FirstName = "Admina",
                            GenreId = 3,
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            LastName = "Strator",
                            Location = "Huntsville",
                            TypeId = 3
                        },
                        new
                        {
                            Id = 2,
                            Address = "102 Main Street",
                            FirstName = "Liam",
                            GenreId = 1,
                            IdentityUserId = "1a2b3c4d-5678-9abc-def0-1234567890ab",
                            LastName = "Walker",
                            Location = "Huntsville",
                            TypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            Address = "103 Main Street",
                            FirstName = "Olivia",
                            GenreId = 2,
                            IdentityUserId = "2b3c4d5e-6789-0abc-def1-2345678901bc",
                            LastName = "Smith",
                            Location = "Huntsville",
                            TypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            Address = "104 Main Street",
                            FirstName = "Noah",
                            GenreId = 3,
                            IdentityUserId = "3c4d5e6f-7890-1abc-def2-3456789012cd",
                            LastName = "Johnson",
                            Location = "Huntsville",
                            TypeId = 3
                        },
                        new
                        {
                            Id = 5,
                            Address = "105 Main Street",
                            FirstName = "Emma",
                            GenreId = 1,
                            IdentityUserId = "4d5e6f70-8901-2abc-def3-4567890123de",
                            LastName = "Brown",
                            Location = "Huntsville",
                            TypeId = 2
                        },
                        new
                        {
                            Id = 6,
                            Address = "106 Main Street",
                            FirstName = "Ava",
                            GenreId = 2,
                            IdentityUserId = "5e6f7081-9012-3abc-def4-5678901234ef",
                            LastName = "Davis",
                            Location = "Huntsville",
                            TypeId = 1
                        });
                });

            modelBuilder.Entity("Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Rock"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pop"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Jazz"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Classical"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Hip-Hop"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ccd2b431-1b10-4e1c-90be-46e952d1932a",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEBr2TY3m/3rFC5xaFetmM1bjQYoUWzVXyoYw0YwJcRyeEIbGRaDKLO6+77kDt3daCQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7b7f80c6-39b2-4fde-badf-1e7857e22de8",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "1a2b3c4d-5678-9abc-def0-1234567890ab",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bcf072b2-8c7c-4631-b05d-e7332679dc47",
                            Email = "liam.walker@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEFriB5MLy3o9xCfB1YZEG3/Zm/YmSNZjUqat2QJq6mTjWhxQn5M9bMb8qiYuIPkyOA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d395daa2-02f2-4cee-929d-09874c06c29b",
                            TwoFactorEnabled = false,
                            UserName = "LiamWalker"
                        },
                        new
                        {
                            Id = "2b3c4d5e-6789-0abc-def1-2345678901bc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "71fabedc-03c0-4208-bcb8-6dc747f50946",
                            Email = "olivia.smith@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEER8t1EhvJMfIHF9YwreG9YcFxiRzCgTPHbCv8pHYBhpGM8gVIHfGyOpU8CjlAomNQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "993e0cc0-9453-4f7e-ac14-760914fda363",
                            TwoFactorEnabled = false,
                            UserName = "OliviaSmith"
                        },
                        new
                        {
                            Id = "3c4d5e6f-7890-1abc-def2-3456789012cd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3fd60502-c49e-4423-a182-19c0274645c6",
                            Email = "noah.johnson@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEJm9NM33tzlwg4aFEMTNzSAmJigdYiZ+GIiL6G9h5slgUXfNIR6slC/071Wci7lNpQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d7fa2544-8b53-48fb-9f7b-a09db5ff54ea",
                            TwoFactorEnabled = false,
                            UserName = "NoahJohnson"
                        },
                        new
                        {
                            Id = "4d5e6f70-8901-2abc-def3-4567890123de",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0bb8fabc-b304-47c8-ac8b-838cb43dcbd1",
                            Email = "emma.brown@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEEM7Bwg776LZyl2uEmYgv+g3yYywkOKL1yoQ6BSTnRdWOK1E0mAbwGeciLjtIgybxQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1750bcd0-f6e3-4bd2-8cc9-fae5a46a203a",
                            TwoFactorEnabled = false,
                            UserName = "EmmaBrown"
                        },
                        new
                        {
                            Id = "5e6f7081-9012-3abc-def4-5678901234ef",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cbf4c86b-26bf-42a1-838f-84733a2bdd03",
                            Email = "ava.davis@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEGxknQiDW//Ua+SIHTNks/vz1qDD0SftT5o/GhLvSnzSH3zE33j32Wv+FR197103Pg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "926b05c8-6b70-4c11-9c11-d0f8e34d374d",
                            TwoFactorEnabled = false,
                            UserName = "AvaDavis"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Song", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.Property<string>("Lyrics")
                        .HasColumnType("text");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("text");

                    b.Property<string>("SongAudioUrl")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("TypeId");

                    b.ToTable("Songs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A haunting rock ballad",
                            GenreId = 1,
                            Lyrics = "In the shadows, where dreams lie broken, echoes of silence, words unspoken...",
                            Title = "Echoes of Silence",
                            TypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "An upbeat pop anthem",
                            GenreId = 2,
                            Lyrics = "Shining lights, city nights, chasing those pop star dreams tonight...",
                            Title = "Pop Star Dreams",
                            TypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Smooth jazz tune",
                            GenreId = 3,
                            Lyrics = "Under the moonlight, we sway, jazz in the night, leads the way...",
                            Title = "Jazz in the Night",
                            TypeId = 3
                        },
                        new
                        {
                            Id = 4,
                            Description = "A serene classical piece",
                            GenreId = 4,
                            Lyrics = "Instrumental melodies that drift and soar, a classical reverie forevermore...",
                            Title = "Classical Reverie",
                            TypeId = 1
                        },
                        new
                        {
                            Id = 5,
                            Description = "A powerful hip-hop track",
                            GenreId = 5,
                            Lyrics = "On the streets, we hustle and grind, hip-hop beats, always on my mind...",
                            Title = "Hip-Hop Hustle",
                            TypeId = 2
                        },
                        new
                        {
                            Id = 6,
                            Description = "An energetic rock song",
                            GenreId = 1,
                            Lyrics = "With a rock and roll heart, we never part, music flows, right from the start...",
                            Title = "Rock and Roll Heart",
                            TypeId = 2
                        },
                        new
                        {
                            Id = 7,
                            Description = "A catchy pop love song",
                            GenreId = 2,
                            Lyrics = "Dancing in the rain, pop love so sweet, feeling the beat, as our hearts meet...",
                            Title = "Pop Love",
                            TypeId = 3
                        },
                        new
                        {
                            Id = 8,
                            Description = "A cool jazz track",
                            GenreId = 3,
                            Lyrics = "In the jazz cafe, we play all night, melodies sway, in the soft light...",
                            Title = "Jazz Cafe",
                            TypeId = 1
                        },
                        new
                        {
                            Id = 9,
                            Description = "A grand symphonic piece",
                            GenreId = 4,
                            Lyrics = "Instrumental symphony that dreams unfold, a timeless tale forever told...",
                            Title = "Symphony of Dreams",
                            TypeId = 2
                        },
                        new
                        {
                            Id = 10,
                            Description = "A modern hip-hop tune",
                            GenreId = 5,
                            Lyrics = "In the city, urban vibes collide, beats and rhymes, on a wild ride...",
                            Title = "Urban Vibes",
                            TypeId = 3
                        });
                });

            modelBuilder.Entity("Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Types");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Vocals"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Instrumentation"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Songwriting"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Mixing/Mastering"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Percussion"
                        });
                });

            modelBuilder.Entity("ArtistSong", b =>
                {
                    b.HasOne("Song", "Song")
                        .WithMany("ArtistSongs")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CadenceCollab.Models.UserProfile", "UserProfile")
                        .WithMany("ArtistSongs")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("CadenceCollab.Models.UserProfile", b =>
                {
                    b.HasOne("Genre", "Genre")
                        .WithMany("Artists")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Type", "Type")
                        .WithMany("Artists")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("IdentityUser");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Song", b =>
                {
                    b.HasOne("Genre", "Genre")
                        .WithMany("Songs")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Type", "Type")
                        .WithMany("Songs")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("CadenceCollab.Models.UserProfile", b =>
                {
                    b.Navigation("ArtistSongs");
                });

            modelBuilder.Entity("Genre", b =>
                {
                    b.Navigation("Artists");

                    b.Navigation("Songs");
                });

            modelBuilder.Entity("Song", b =>
                {
                    b.Navigation("ArtistSongs");
                });

            modelBuilder.Entity("Type", b =>
                {
                    b.Navigation("Artists");

                    b.Navigation("Songs");
                });
#pragma warning restore 612, 618
        }
    }
}
