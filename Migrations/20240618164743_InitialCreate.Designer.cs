// <auto-generated />
using System;
using CadenceCollab.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Cadence_Collab.Migrations
{
    [DbContext(typeof(CadenceCollabDbContext))]
    [Migration("20240618164743_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ArtistSong", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SongId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("ArtistSongs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SongId = 1,
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 2,
                            SongId = 2,
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 3,
                            SongId = 3,
                            UserProfileId = 3
                        },
                        new
                        {
                            Id = 4,
                            SongId = 4,
                            UserProfileId = 4
                        },
                        new
                        {
                            Id = 5,
                            SongId = 5,
                            UserProfileId = 5
                        },
                        new
                        {
                            Id = 6,
                            SongId = 6,
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 7,
                            SongId = 7,
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 8,
                            SongId = 8,
                            UserProfileId = 3
                        },
                        new
                        {
                            Id = 9,
                            SongId = 9,
                            UserProfileId = 4
                        },
                        new
                        {
                            Id = 10,
                            SongId = 10,
                            UserProfileId = 5
                        });
                });

            modelBuilder.Entity("CadenceCollab.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("text");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("IdentityUserId");

                    b.HasIndex("TypeId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "101 Main Street",
                            FirstName = "Admina",
                            GenreId = 3,
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            LastName = "Strator",
                            Location = "Huntsville",
                            TypeId = 3
                        },
                        new
                        {
                            Id = 2,
                            Address = "102 Main Street",
                            FirstName = "User",
                            GenreId = 1,
                            IdentityUserId = "1a2b3c4d-5678-9abc-def0-1234567890ab",
                            LastName = "One",
                            Location = "Huntsville",
                            TypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            Address = "103 Main Street",
                            FirstName = "User",
                            GenreId = 2,
                            IdentityUserId = "2b3c4d5e-6789-0abc-def1-2345678901bc",
                            LastName = "Two",
                            Location = "Huntsville",
                            TypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            Address = "104 Main Street",
                            FirstName = "User",
                            GenreId = 3,
                            IdentityUserId = "3c4d5e6f-7890-1abc-def2-3456789012cd",
                            LastName = "Three",
                            Location = "Huntsville",
                            TypeId = 3
                        },
                        new
                        {
                            Id = 5,
                            Address = "105 Main Street",
                            FirstName = "User",
                            GenreId = 1,
                            IdentityUserId = "4d5e6f70-8901-2abc-def3-4567890123de",
                            LastName = "Four",
                            Location = "Huntsville",
                            TypeId = 2
                        },
                        new
                        {
                            Id = 6,
                            Address = "106 Main Street",
                            FirstName = "User",
                            GenreId = 2,
                            IdentityUserId = "5e6f7081-9012-3abc-def4-5678901234ef",
                            LastName = "Five",
                            Location = "Huntsville",
                            TypeId = 1
                        });
                });

            modelBuilder.Entity("Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Rock"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pop"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Jazz"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Classical"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Hip-Hop"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            Name = "Admin",
                            NormalizedName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2ab3330c-a0c1-4ec5-9cc3-0d91709584b6",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAENb7cUCFyIj0OwEOniRX934ZWHOPxU5GYT524sY0VjFGd3oThgn89035E0SC60GcIA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "de904931-c976-4cc2-86cb-ef3cc632cbc8",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "1a2b3c4d-5678-9abc-def0-1234567890ab",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a7932fb0-d8cd-4d9f-94f6-1c79c17e53d5",
                            Email = "user1@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAENFpvj49j6JuIpZezi7fH/pUWd5hgpEYGi8DcLBuWhqwWQ+1GX9UiLjI8R49ODE5uw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8a37b1c4-2d9a-4b63-985f-4cc185bace87",
                            TwoFactorEnabled = false,
                            UserName = "User1"
                        },
                        new
                        {
                            Id = "2b3c4d5e-6789-0abc-def1-2345678901bc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9dad2958-489a-40f6-8f01-6d673aa2ea84",
                            Email = "user2@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEF0qse3Xor23KLTq1yUsQiai56J/mBD0xrRPl7R3SeVC2lleTQeiG57ofy4SjYg0kQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "661dfbdd-7077-43b2-8591-4b42172d1d2a",
                            TwoFactorEnabled = false,
                            UserName = "User2"
                        },
                        new
                        {
                            Id = "3c4d5e6f-7890-1abc-def2-3456789012cd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3088127-171c-49c2-bd75-b2448c64b738",
                            Email = "user3@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEFrELOrpdmnQN0kQKpPgVgPbMoHJhqGuhrDubZ1mua+LHJExxMZiToMm9av68QgyZw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bfd4ae67-f9b7-4e00-a2ff-f7d6869e2305",
                            TwoFactorEnabled = false,
                            UserName = "User3"
                        },
                        new
                        {
                            Id = "4d5e6f70-8901-2abc-def3-4567890123de",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cd295139-70ef-49b5-8990-238af9d92847",
                            Email = "user4@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEPueUJNBajitw2PTuAifVGyUvemBQGAsuHR5bubN2g0JusLyEtcZ4T7/B0M/iJnORg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "34162121-99a8-4bbf-8fd3-f84676a4154f",
                            TwoFactorEnabled = false,
                            UserName = "User4"
                        },
                        new
                        {
                            Id = "5e6f7081-9012-3abc-def4-5678901234ef",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7ce8fb41-6a96-47d7-bea4-22979fc8f36a",
                            Email = "user5@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEJMc01vxh/LBeY3KtbK9atwXmSaVVHOaYIbzQCs8kuiZ9WlIw/NNdy3BwrWwDQSwOQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6f2e11b4-5b19-4b17-92db-5c3f7e4be55c",
                            TwoFactorEnabled = false,
                            UserName = "User5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Song", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.Property<string>("Lyrics")
                        .HasColumnType("text");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("text");

                    b.Property<string>("SongAudioUrl")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("TypeId");

                    b.ToTable("Songs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Description One",
                            GenreId = 1,
                            Title = "Song One",
                            TypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Description Two",
                            GenreId = 2,
                            Title = "Song Two",
                            TypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Description Three",
                            GenreId = 3,
                            Title = "Song Three",
                            TypeId = 3
                        },
                        new
                        {
                            Id = 4,
                            Description = "Description Four",
                            GenreId = 4,
                            Title = "Song Four",
                            TypeId = 1
                        },
                        new
                        {
                            Id = 5,
                            Description = "Description Five",
                            GenreId = 5,
                            Title = "Song Five",
                            TypeId = 2
                        },
                        new
                        {
                            Id = 6,
                            Description = "Description Six",
                            GenreId = 1,
                            Title = "Song Six",
                            TypeId = 2
                        },
                        new
                        {
                            Id = 7,
                            Description = "Description Seven",
                            GenreId = 2,
                            Title = "Song Seven",
                            TypeId = 3
                        },
                        new
                        {
                            Id = 8,
                            Description = "Description Eight",
                            GenreId = 3,
                            Title = "Song Eight",
                            TypeId = 1
                        },
                        new
                        {
                            Id = 9,
                            Description = "Description Nine",
                            GenreId = 4,
                            Title = "Song Nine",
                            TypeId = 2
                        },
                        new
                        {
                            Id = 10,
                            Description = "Description Ten",
                            GenreId = 5,
                            Title = "Song Ten",
                            TypeId = 3
                        });
                });

            modelBuilder.Entity("Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Types");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Vocals"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Instrumentation"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Songwriting"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Mixing/Mastering"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Percussion"
                        });
                });

            modelBuilder.Entity("ArtistSong", b =>
                {
                    b.HasOne("Song", "Song")
                        .WithMany("ArtistSongs")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CadenceCollab.Models.UserProfile", "UserProfile")
                        .WithMany("ArtistSongs")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("CadenceCollab.Models.UserProfile", b =>
                {
                    b.HasOne("Genre", "Genre")
                        .WithMany("Artists")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Type", "Type")
                        .WithMany("Artists")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("IdentityUser");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Song", b =>
                {
                    b.HasOne("Genre", "Genre")
                        .WithMany("Songs")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Type", "Type")
                        .WithMany("Songs")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("CadenceCollab.Models.UserProfile", b =>
                {
                    b.Navigation("ArtistSongs");
                });

            modelBuilder.Entity("Genre", b =>
                {
                    b.Navigation("Artists");

                    b.Navigation("Songs");
                });

            modelBuilder.Entity("Song", b =>
                {
                    b.Navigation("ArtistSongs");
                });

            modelBuilder.Entity("Type", b =>
                {
                    b.Navigation("Artists");

                    b.Navigation("Songs");
                });
#pragma warning restore 612, 618
        }
    }
}
